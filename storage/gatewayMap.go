///////////////////////////////////////////////////////////////////////////////
// Copyright Â© 2020 xx network SEZC                                          //
//                                                                           //
// Use of this source code is governed by a license that can be found in the //
// LICENSE file                                                              //
///////////////////////////////////////////////////////////////////////////////

// Handles the Map backend for gateway storage

package storage

import (
	"bytes"
	"github.com/pkg/errors"
	"gitlab.com/xx_network/primitives/id"
	"time"
)

// Returns a Client from database with the given id
// Or an error if a matching Client does not exist
func (m *MapImpl) GetClient(id *id.ID) (*Client, error) {
	m.RLock()
	client := m.clients[*id]
	m.RUnlock()

	// Return an error if the Client was not found in the map
	if client == nil {
		return nil, errors.Errorf("Could not find Client with ID %v in map.",
			id)
	}

	return client, nil
}

// Inserts the given Client into database
// Returns an error if a Client with a matching Id already exists
func (m *MapImpl) InsertClient(client *Client) error {
	// Convert Client's ID to an ID object
	clientID, err := id.Unmarshal(client.Id)
	if err != nil {
		return err
	}

	m.Lock()
	defer m.Unlock()

	// Return an error if a Client with the ID already exists in the map
	if m.clients[*clientID] != nil {
		return errors.Errorf("Could not insert Client. Client with ID %v "+
			"already exists in map.", clientID)
	}

	m.clients[*clientID] = client

	return nil
}

// Returns a Round from database with the given id
// Or an error if a matching Round does not exist
func (m *MapImpl) GetRound(id id.Round) (*Round, error) {
	m.RLock()
	round := m.rounds[id]
	m.RUnlock()

	// Return an error if the Round was not found in the map
	if round == nil {
		return nil, errors.Errorf("Could not find Round with ID %v in map.", id)
	}

	return round, nil
}

// Returns multiple Rounds from database with the given ids
// Or an error if no matching Rounds exist
func (m *MapImpl) GetRounds(ids []id.Round) ([]*Round, error) {
	m.RLock()
	defer m.RUnlock()

	results := make([]*Round, 0)
	for _, roundId := range ids {
		if round := m.rounds[roundId]; round != nil {
			results = append(results, round)
		}
	}

	if len(results) == 0 {
		return nil, errors.Errorf("Could not find matching Rounds in map.")
	}
	return results, nil
}

// Inserts the given Round into database if it does not exist
// Or updates the given Round if the provided Round UpdateId is greater
func (m *MapImpl) UpsertRound(round *Round) error {
	roundID := id.Round(round.Id)

	m.Lock()
	defer m.Unlock()
	// Insert the round if it does not exist or if it does exist, update it if
	// the update ID provided is greater
	if m.rounds[roundID] == nil || round.UpdateId > m.rounds[roundID].UpdateId {
		m.rounds[roundID] = round
	}

	return nil
}

// Count the number of MixedMessage in the database for the given roundId
func (m *MapImpl) countMixedMessagesByRound(roundId id.Round) (uint64, error) {
	// TODO
	return 0, nil
}

// Returns a slice of MixedMessages from database
// with matching recipientId and roundId
// Or an error if a matching Round does not exist
func (m *MapImpl) getMixedMessages(recipientId *id.ID, roundId id.Round) ([]*MixedMessage, error) {
	roundID := uint64(roundId)
	var mixedMessages []*MixedMessage

	m.RLock()
	// Search map for all MixedMessages with matching recipient ID and round ID
	for _, msg := range m.mixedMessages {
		if bytes.Equal(msg.RecipientId, recipientId.Marshal()) && msg.RoundId == roundID {
			mixedMessages = append(mixedMessages, msg)
		}
	}
	m.RUnlock()

	// Return an error if no MixedMessages were found.
	if len(mixedMessages) == 0 {
		return nil, errors.Errorf("Could not find any MixedMessages with the "+
			"recipient ID %v and the round ID %v in map.", recipientId, roundId)
	}

	return mixedMessages, nil
}

// Inserts the given list of MixedMessage into database
// NOTE: Do not specify Id attribute, it is autogenerated
func (m *MapImpl) InsertMixedMessages(msgs []*MixedMessage) error {
	// TODO
	return nil
}

// Deletes all MixedMessages with the given roundId from database
func (m *MapImpl) DeleteMixedMessageByRound(roundId id.Round) error {
	m.Lock()
	defer m.Unlock()

	for k, v := range m.mixedMessages {
		if v.RoundId == uint64(roundId) {
			delete(m.mixedMessages, k)
		}
	}

	return nil
}

// Returns a BloomFilter from database with the given clientId
// Or an error if a matching BloomFilter does not exist
func (m *MapImpl) getBloomFilters(clientId *id.ID) ([]*BloomFilter, error) {
	var bloomFilters []*BloomFilter

	m.RLock()
	// Search map for all BloomFilters with matching client ID
	for _, bf := range m.bloomFilters {
		if bytes.Equal(bf.ClientId, clientId.Marshal()) {
			bloomFilters = append(bloomFilters, bf)
		}
	}
	m.RUnlock()

	// Return an error if no BloomFilters were found.
	if len(bloomFilters) == 0 {
		return nil, errors.Errorf("Could not find any BloomFilters with the "+
			"client ID %v in map.", clientId)
	}

	return bloomFilters, nil
}

// Inserts the given BloomFilter into database
// NOTE: Do not specify Id attribute, it is autogenerated
func (m *MapImpl) UpsertBloomFilter(filter *BloomFilter) error {
	m.Lock()
	defer m.Unlock()

	// Return an error if a BloomFilter with the ID already exists in the map
	if m.bloomFilters[m.bloomFiltersCount] != nil {
		return errors.Errorf("Could not insert BloomFilter. BloomFilter with "+
			"ID %v already exists in map.", m.bloomFiltersCount)
	}

	m.bloomFilters[m.bloomFiltersCount] = filter

	m.bloomFiltersCount++

	return nil
}

// Deletes all BloomFilter with the given epochId from database
// Returns an error if a matching BloomFilter does not exist
func (m *MapImpl) deleteBloomFilterByEpoch(epochId uint64) error {
	// TODO
	return nil
}

// Returns a EphemeralBloomFilter from database with the given recipientId
// Or an error if a matching EphemeralBloomFilter does not exist
func (m *MapImpl) getEphemeralBloomFilters(recipientId *id.ID) ([]*EphemeralBloomFilter, error) {
	var ephemeralBloomFilter []*EphemeralBloomFilter

	m.RLock()
	// Search map for all EphemeralBloomFilters with matching recipient ID
	for _, ebf := range m.ephemeralBloomFilters {
		if bytes.Equal(ebf.RecipientId, recipientId.Marshal()) {
			ephemeralBloomFilter = append(ephemeralBloomFilter, ebf)
		}
	}
	m.RUnlock()

	// Return an error if no EphemeralBloomFilters were found.
	if len(ephemeralBloomFilter) == 0 {
		return nil, errors.Errorf("Could not find any EphemeralBloomFilters "+
			"with the recipient ID %v in map.", recipientId)
	}

	return ephemeralBloomFilter, nil
}

// Inserts the given EphemeralBloomFilter into database
// NOTE: Do not specify Id attribute, it is autogenerated
func (m *MapImpl) UpsertEphemeralBloomFilter(filter *EphemeralBloomFilter) error {
	m.Lock()
	defer m.Unlock()

	// Return an error if a BloomFilter with the ID already exists in the map
	if m.ephemeralBloomFilters[m.ephemeralBloomFiltersCount] != nil {
		return errors.Errorf("Could not insert EphemeralBloomFilter."+
			"EphemeralBloomFilter with ID %v already exists in map.",
			m.ephemeralBloomFiltersCount)
	}

	m.ephemeralBloomFilters[m.ephemeralBloomFiltersCount] = filter

	m.ephemeralBloomFiltersCount++

	return nil
}

// Deletes all EphemeralBloomFilter with the given epochId from database
// Returns an error if a matching EphemeralBloomFilter does not exist
func (m *MapImpl) deleteEphemeralBloomFilterByEpoch(epochId uint64) error {
	// TODO
	return nil
}

// Returns an Epoch from the database with the given id
// Or an error if a matching Epoch does not exist
func (m *MapImpl) GetEpoch(id uint64) (*Epoch, error) {
	// TODO
	return &Epoch{
		Id:                    0,
		RoundId:               0,
		DateCreated:           time.Time{},
		BloomFilters:          nil,
		EphemeralBloomFilters: nil,
	}, nil
}

// Returns the newest Epoch in the database
func (m *MapImpl) GetLatestEpoch() (*Epoch, error) {
	// TODO
	return &Epoch{
		Id:                    0,
		RoundId:               0,
		DateCreated:           time.Time{},
		BloomFilters:          nil,
		EphemeralBloomFilters: nil,
	}, nil
}

// Inserts an Epoch with the given roundId into the database
// Returns the newly-created Epoch from the database
func (m *MapImpl) InsertEpoch(roundId id.Round) (*Epoch, error) {
	// TODO
	return nil, nil
}
