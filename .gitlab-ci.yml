# From: https://about.gitlab.com/2017/09/21/how-to-create-ci-cd-pipeline-with-autodeploy-to-kubernetes-using-gitlab-and-helm/

variables:
  REPO_DIR: gitlab.com/elixxir
  REPO_NAME: gateway
  DOCKER_IMAGE: elixxirlabs/cuda-go:latest
  MIN_CODE_COVERAGE: "80.0"

before_script:
  ##
  ## Go Setup
  ##
  - go version || echo "Go executable not found."
  - echo $CI_BUILD_REF
  - echo $CI_PROJECT_DIR
  - echo $PWD
  - eval $(ssh-agent -s)
  - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
  - mkdir -p ~/.ssh
  - chmod 700 ~/.ssh
  - ssh-keyscan -t rsa gitlab.com > ~/.ssh/known_hosts
  - git config --global url."git@gitlab.com:".insteadOf "https://gitlab.com/"
  - export PATH=$HOME/go/bin:$PATH
  - export GOPRIVATE=gitlab.com/elixxir/*

stages:
  - build
  - trigger_integration

build:
  stage: build
  image: $DOCKER_IMAGE
  except:
    - tags
  script:
    - git clean -ffdx
    - go mod vendor -v
    - go build ./...
    - go mod tidy
    - mkdir -p testdata

    # Test coverage
    - go-acc --covermode atomic --output testdata/coverage.out ./... -- -v
    # Exclude some specific packages and files
    - grep -v cmd testdata/coverage.out > testdata/coverage-real.out
    - go tool cover -func=testdata/coverage-real.out
    - go tool cover -html=testdata/coverage-real.out -o testdata/coverage.html

    # Test Coverage Check
    - go tool cover -func=testdata/coverage-real.out | grep "total:" | awk '{print $3}' | sed 's/\%//g' > testdata/coverage-percentage.txt
    - export CODE_CHECK=$(echo "$(cat testdata/coverage-percentage.txt) >= $MIN_CODE_COVERAGE" | bc -l)
    - (if [ "$CODE_CHECK" == "1" ]; then echo "Minimum coverage of $MIN_CODE_COVERAGE succeeded"; else echo "Minimum coverage of $MIN_CODE_COVERAGE failed"; exit 1; fi);

    - mkdir -p release
    - GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -ldflags '-w -s' ./...
    - GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -ldflags '-w -s' -o release/gateway.linux64 main.go
    - GOOS=windows GOARCH=amd64 CGO_ENABLED=0 go build -ldflags '-w -s' -o release/gateway.win64 main.go
    - GOOS=windows GOARCH=386 CGO_ENABLED=0 go build -ldflags '-w -s' -o release/gateway.win32 main.go
    - GOOS=darwin GOARCH=amd64 CGO_ENABLED=0 go build -ldflags '-w -s' -o release/gateway.darwin64 main.go
  artifacts:
    paths:
      - vendor/
      - testdata/
      - release/

tag:
    stage: trigger_integration
    only:
        - master
    image: $DOCKER_IMAGE
    script:
        - git remote add origin_tags git@gitlab.com:elixxir/gateway.git || true
        - git remote set-url origin_tags git@gitlab.com:elixxir/gateway.git || true
        - git tag $(./release/gateway.linux64 version | grep "xx network Gateway v"| cut -d ' ' -f3) -f
        - git push origin_tags -f --tags

trigger_integration:
  stage: trigger_integration
  script:
    - "curl -X POST -F token=e34aa19ef1530e579c5d590873d3c6 -F ref=master https://gitlab.com/api/v4/projects/5615854/trigger/pipeline"
    - "curl -X POST -F token=d1888aeb7d0e1e6573b313a59ff16e -F ref=master https://gitlab.com/api/v4/projects/5681102/trigger/pipeline"
  only:
    - master
